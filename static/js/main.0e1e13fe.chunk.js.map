{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","idleTimer","onAction","_onAction","bind","assertThisInitialized","onActive","_onActive","onIdle","_onIdle","midiSounds","playChordNow","e","console","log","getRemainingTime","getLastActiveTime","_this2","react_default","a","createElement","className","index_es","ref","element","document","debounce","timeout","src","logo","alt","href","target","rel","onClick","playTestInstrument","playTestInstrument2","playTestInstrument3","midisoundsreact_default","appElementName","instruments","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e1e13fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MIDISounds from 'midi-sounds-react';\nimport IdleTimer from 'react-idle-timer';\n\n\nclass App extends Component {\n\n  playTestInstrument() {\n\t\tthis.midiSounds.playChordNow(3, [60], 2.5);\n  }\n  \n  playTestInstrument2() {\n\t\tthis.midiSounds.playChordNow(3, [61], 2.5);\n  }\n  playTestInstrument3() {\n\t\tthis.midiSounds.playChordNow(3, [62], 2.5);\n  }\n  \n  constructor(props) {\n    super(props)\n    this.idleTimer = null\n    this.onAction = this._onAction.bind(this)\n    this.onActive = this._onActive.bind(this)\n    this.onIdle = this._onIdle.bind(this)\n  }\n \n \n  _onAction(e) {\n    console.log('user did something', e);\n    //this.playTestInstrument3();\n  }\n  \n  _onActive(e) {\n    console.log('user is active', e)\n    console.log('time remaining', this.idleTimer.getRemainingTime())\n  }\n \n  _onIdle(e) {\n    console.log('user is idle', e)\n    console.log('last active', this.idleTimer.getLastActiveTime())\n  }\n\n  render() {\n    return (\n      \n      <div className=\"App\">\n      <div>\n        <IdleTimer\n          ref={ref => { this.idleTimer = ref }}\n          element={document}\n          onActive={this.onActive}\n          onIdle={this.onIdle}\n          onAction={this.onAction}\n          debounce={250}\n          timeout={1000 * 60 * 15} />\n        {/* your app here */}\n      </div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <p><button onClick={this.playTestInstrument.bind(this)}>C</button></p>\n          \n          <p><button onClick={this.playTestInstrument2.bind(this)}>C#</button></p>\n          \n          <p><button onClick={this.playTestInstrument3.bind(this)}>D</button></p>\n\n          <p><button onClick={this.playTestInstrument3.bind(this)}>D</button></p>\n\n          <p><button onClick={this.playTestInstrument3.bind(this)}>D</button></p>\n\n          <p><button onClick={this.playTestInstrument3.bind(this)}>D</button></p>\n\n          <p><button onClick={this.playTestInstrument3.bind(this)}>D</button></p>\n        </header>\n        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[3]} />\t\n\t\t<hr/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}